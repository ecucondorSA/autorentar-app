{
  "root": true,
  "ignorePatterns": [
    "node_modules/",
    "dist/",
    ".angular/",
    "coverage/",
    "e2e/",
    "playwright-report/",
    "test-results/"
  ],
  "overrides": [
    {
      "files": ["*.ts"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": ["tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "plugins": [
        "@typescript-eslint",
        "import",
        "unused-imports"
      ],
      "settings": {
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true,
            "project": "tsconfig.json"
          }
        }
      },
      "rules": {
        // =========================================
        // TYPESCRIPT STRICT RULES
        // =========================================
        "@typescript-eslint/explicit-function-return-type": ["error", {
          "allowExpressions": true,
          "allowTypedFunctionExpressions": true,
          "allowHigherOrderFunctions": true
        }],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/strict-boolean-expressions": ["error", {
          "allowString": false,
          "allowNumber": false,
          "allowNullableObject": false,
          "allowNullableBoolean": false,
          "allowNullableString": false,
          "allowNullableNumber": false,
          "allowAny": false
        }],
        "@typescript-eslint/no-unused-vars": "off", // Handled by unused-imports
        "@typescript-eslint/consistent-type-imports": ["error", {
          "prefer": "type-imports",
          "disallowTypeAnnotations": true
        }],
        "@typescript-eslint/consistent-type-exports": ["error", {
          "fixMixedExportsWithInlineTypeSpecifier": true
        }],
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"],
            "leadingUnderscore": "allow",
            "trailingUnderscore": "allow"
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "enumMember",
            "format": ["UPPER_CASE", "PascalCase"]
          },
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^I[A-Z]",
              "match": false
            }
          }
        ],

        // =========================================
        // IMPORT/EXPORT RULES
        // =========================================
        "import/no-unresolved": "error",
        "import/named": "error",
        "import/default": "error",
        "import/no-absolute-path": "error",
        "import/no-self-import": "error",
        "import/no-cycle": ["error", {
          "maxDepth": 10,
          "ignoreExternal": true
        }],
        "import/no-useless-path-segments": ["error", {
          "noUselessIndex": true
        }],
        "import/no-duplicates": ["error", {
          "considerQueryString": true
        }],
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-default-export": "error",
        "import/order": ["error", {
          "groups": [
            "builtin",
            "external",
            "internal",
            "parent",
            "sibling",
            "index",
            "object",
            "type"
          ],
          "pathGroups": [
            {
              "pattern": "@angular/**",
              "group": "external",
              "position": "before"
            },
            {
              "pattern": "@app/**",
              "group": "internal",
              "position": "before"
            },
            {
              "pattern": "@types/**",
              "group": "type",
              "position": "after"
            }
          ],
          "pathGroupsExcludedImportTypes": ["builtin"],
          "alphabetize": {
            "order": "asc",
            "caseInsensitive": true
          },
          "newlines-between": "always"
        }],

        // =========================================
        // UNUSED IMPORTS
        // =========================================
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": ["error", {
          "vars": "all",
          "varsIgnorePattern": "^_",
          "args": "after-used",
          "argsIgnorePattern": "^_"
        }],

        // =========================================
        // GENERAL CODE QUALITY
        // =========================================
        "no-console": ["warn", {
          "allow": ["warn", "error"]
        }],
        "no-debugger": "error",
        "no-alert": "error",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-arrow-callback": "error",
        "prefer-template": "error",
        "no-duplicate-imports": "off", // Handled by import/no-duplicates
        "no-return-await": "off",
        "@typescript-eslint/return-await": "error",
        "eqeqeq": ["error", "always", {
          "null": "ignore"
        }],
        "curly": ["error", "all"],
        "brace-style": "off",
        "@typescript-eslint/brace-style": ["error", "1tbs"],
        "max-len": ["error", {
          "code": 120,
          "ignoreUrls": true,
          "ignoreStrings": true,
          "ignoreTemplateLiterals": true,
          "ignoreRegExpLiterals": true
        }],
        "max-depth": ["error", 4],
        "max-nested-callbacks": ["error", 3],
        "complexity": ["error", 15],

        // =========================================
        // PREVENT COMMON ERRORS
        // =========================================
        "no-template-curly-in-string": "error",
        "no-unreachable-loop": "error",
        "no-promise-executor-return": "error",
        "no-unsafe-optional-chaining": "error",
        "require-atomic-updates": "error",
        "array-callback-return": "error",
        "no-constructor-return": "error",
        "no-duplicate-case": "error",
        "no-inner-declarations": "error",
        "no-self-compare": "error",
        "no-unmodified-loop-condition": "error",
        "no-unused-private-class-members": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",

        // =========================================
        // ANTI-PATTERNS
        // =========================================
        "no-eval": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "no-new-func": "error",
        "no-extend-native": "error",
        "no-proto": "error",
        "no-script-url": "error",
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": "error",
        "prefer-promise-reject-errors": "error"
      }
    },
    {
      "files": ["*.html"],
      "extends": [],
      "rules": {}
    },
    {
      "files": ["*.spec.ts", "*.test.ts", "e2e/**/*.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "max-nested-callbacks": "off"
      }
    }
  ]
}
